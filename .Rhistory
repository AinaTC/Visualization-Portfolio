setwd("C:/Users/Aina/AppData/Local/Temp/Temp1_AEOmultivar.zip")
############################################################################
#### PLSR script AEO_Multivar_NinPotato
#### V0.2 2013-02-18
#### Lammert Kooistra and Harm Bartholomeus
#### Objective: This script describes the comments for the AEO exercise
#### 4.2 PLS regression for nitrogen in potato
#### Instructions: Go through the script step by step and execute the R-code
#### (select code and Ctrl-R). Answer the questions in a seperate document.
#### If required you can also copy the figures to this answer document.
############################################################################
## IMPORTANT: set the working folder according to your specifications
setwd("D:/Userdata/Lammert/onderwijs/advanced earth observation/multivariate statistics in RS/exercise_R")
## read the data set and check the data file: what do the columns represent?
data <- read.table("potato_N.csv", header=TRUE, sep=",")
data <- as.data.frame(data)
head(data[1:10])
## make a variable with all the wavelengths: we need this one later
wavelength <- as.data.frame(t(c(350:2500)))
### evaluating the nitrogen data
N <- as.numeric(unlist(data[3]))
hist(N)
## QUESTION 1: are the nitrogen data normally distributed?
## make a matrix with spectral data only
spectra <-(data[4:ncol(data)])
## plotting the first 7 spectra
plot( t(spectra[1,])~t(wavelength), type="l", lty=1, ylim=c(0,1), xlab="band number [-]", ylab="Reflectance [-]")
points( t(spectra[2,])~t(wavelength), type="l", lty=2,col=2, ylim=c(0,1))
points( t(spectra[3,])~t(wavelength), type="l", lty=2,col=3, ylim=c(0,1))
points( t(spectra[4,])~t(wavelength), type="l", lty=2,col=4, ylim=c(0,1))
points( t(spectra[5,])~t(wavelength), type="l", lty=2,col=5, ylim=c(0,1))
points( t(spectra[6,])~t(wavelength), type="l", lty=2,col=6, ylim=c(0,1))
points( t(spectra[7,])~t(wavelength), type="l", lty=2,col=7, ylim=c(0,1))
## QUESTION 2: Evaluate the spectral dataset of the potato canopy: explain the form of the curve,
## how do you assess the quality of the data?
## PLS is applied (function plsr) on all spectra, leave-one-out cross validation is applied to evaluate
## the quality of the PLS regression models
library(pls)
refl.pls <- plsr(N ~ as.matrix(spectra), ncomp=20, validation = "LOO") ## 5 components, LOO cross validation
## the next plot shows relation between nr of components of the PLS model
## and the accuracy of the PLS model indicated by the RMSEP
validationplot(refl.pls)
## QUESTION 3: How do you assess the quality of the PLS model? How many components would
## you use for the PLS model?
## Calculate the explained variance per component both for spectra (X) and nitrogen (N)
summary(refl.pls)
## The CV values give the RMSEP values as indicated in the validation plot
## QUESTION 4: What is the RMSEP using 1 component? Note down the variance explained
## for the spectra (X) and the nitrogen (N) with one component.
## calculate R2
R2.1 <- R2(refl.pls, ncomp=1)
R2.1 <- unlist(R2.1)
R2.1 <- round(R2.1$val2, digits=3)
R2.1
## calculate the RPD
pred.1 <-as.data.frame(fitted(refl.pls))
pred.1 <- as.numeric(as.matrix(pred.1[1]))
RMSE_pls.1 <- sqrt(mean((N - pred.1)^2))
RMSE_pls.1 <- round(RMSE_pls.1, digits=3)
RPD.1 <- round((sd(N)/RMSE_pls.1), digits=3)
RPD.1
## QUESTION 5: How do you judge the value of the R2 and RPD for this PLS model with one component?
## Prepare the 1:1 plot for observed vs predicted variable
plot (pred.1 ~N, xlab="Nitrogen observed [%]", ylab="Nitrogen predicted [%]", xlim=c(0,max(N)*1.2), ylim=c(0,max(N)*1.2), main="Nitrogen observed vs predicted")
abline(0,1, lty=2)
legend ("bottomright", c(paste("R2 = ", R2.1), paste("RMSE = ", RMSE_pls.1), paste("RPD = ", RPD.1)), bty="n")
legend (max(N),max(N)*1.15, "1:1 line", bty="n")
## QUESTION 6: How do you evaluate this figure: what can you state about the quality of the model?
## Plot the regression coefficient of the PLS model with one component
coefplot(refl.pls, ncom=1, labels=wavelength)
## QUESTION 7: What do you conclude from the plot of regression coefficients? Which wavelengths
## are most important: does this explain the result of the PLS model?
## To improve the PLS model, now we will remove some spectral regions from the dataset.
## First create a dataset which includes both spectral data and the wavelength numbers
wavelength <- c(350:2500)
spectra.com <- as.matrix(t( data.frame(wavelength, t(spectra), check.names=FALSE)))
## Take selected variables only (note: these are variable names selected, not wavelengths
## add 350 to get the wavelength values)
#### wavelength.sel <- as.data.frame((wavelength[51:1001] wavelength[1201:1451] wavelength[1651:2051]))
spectra.sel <- (cbind(spectra.com[,51:1001], spectra.com[,1201:1451], spectra.com[,1651:2051]))
# QUESTION 8: Which wavelength ranges have been excluded?
### Plot graphs of first spectra in dataset
plot( (spectra.sel[2,]~(spectra.sel[1,])), type="l", lty=1, ylim=c(0,1), xlab="Wavelength [nm]", ylab="Reflectance factor [-]")
points( (spectra.sel[3,]~(spectra.sel[1,])), type="l", lty=2,col=2)
points( (spectra.sel[4,]~(spectra.sel[1,])), type="l", lty=3,col=3)
points( (spectra.sel[5,]~(spectra.sel[1,])), type="l", lty=4,col=4)
points( (spectra.sel[6,]~(spectra.sel[1,])), type="l", lty=5,col=5)
points( (spectra.sel[7,]~(spectra.sel[1,])), type="l", lty=6,col=6)
points( (spectra.sel[8,]~(spectra.sel[1,])), type="l", lty=7,col=7)
## Perform PLSR for dataset with removed spectral regions
## First create variable with reflectance data only
spectra.sel2<- as.matrix(spectra.sel[2:nrow(spectra.sel),] )
pls.sel <- plsr(N ~ spectra.sel2, ncomp=20, validation = "LOO", method="oscorespls") ## 5 components, LOO cross validation
## refl.pls <- plsr(N ~ spectra, 5, validation = "CV")  ## 5 components, 10 random segments
summary(pls.sel)
validationplot(pls.sel)
## QUESTION 9: Use the cross-validation plot to decide on the number of components to include
## in the PLS model: fill this number behind LV in the next script line
LV=4 ## set the number of components you want to include here
## Prepare loading plot per added component
coefplot(pls.sel, ncom=1, ylim=c(-12, 3)) ## coefficients component 1
coefplot(pls.sel, ncom=2, add=TRUE, col=2) ## coefficients component 2
coefplot(pls.sel, ncom=3, add=TRUE, col=3) ## coefficients component 3
coefplot(pls.sel, ncom=4, add=TRUE, col=4) ## coefficients component 3
## QUESTION 10: Explain what can be derived from the loading plot: black line: comp 1; red line:
## comp 2; green line: comp 3; and blue line: comp 4.
### Prepare the 1:1 plot for observed vs predicted variable
pred <-as.data.frame(fitted(pls.sel))
pred <- as.numeric(as.matrix(pred[LV]))
pred
RMSE.pls <- sqrt(mean((N - pred)^2))
RMSE.pls <- round(RMSE.pls, digits=3)
### Get the RMSE of the cross-validation
RMSE.pls.CV <- RMSEP(pls.sel, ncomp=LV)
RMSE.pls.CV <- unlist(RMSE.pls.CV)
RMSE.pls.CV <- round(RMSE.pls.CV$val4, digits=3)
### Get the R2 value out
R2.pls <- R2(pls.sel, ncomp=LV)
R2.pls <- unlist(R2.pls)
R2.pls <- round(R2.pls$val2, digits=3)
R2.pls
### Get the Leave-One-Out validation predicted values
pred.loo <- pls.sel$validation$pred[,,LV]
pred.loo
#### RPD of prediction
RPD <- round((sd(N)/RMSE.pls), digits=3)
RPD
#### Create the 1:1 plot for observed vs predicted variable
plot (pred ~N, xlab="Nitrogen observed [%]", ylab="Nitrogen fitted [%]", xlim=c(0,max(N)*1.2), ylim=c(0,max(N)*1.2), main="Nitrogen observed vs predicted")
points (pred.loo ~N, xlab="Nitrogen observed [%]", ylab="Nitrogen fitted [%]", xlim=c(0,max(N)*1.2), ylim=c(0,max(N)*1.2), main="Nitrogen observed vs predicted", col=2, pch=2)
abline(0,1, lty=2)
legend("topleft", c("Fitted", "Loo CV"), pch=c(1,2), col=c(1,2))
legend ("bottomright", c(paste("RMSE fit = ", RMSE.pls), paste("RMSE loocv =", RMSE.pls.CV), paste("R2 fit = ", R2.pls), paste("RPD = ", RPD)), bty="n")
legend (max(N),max(N)*1.15, "1:1 line", bty="n")
## QUESTION 11: How do you judge the value of this new PLS model? Explain the difference between
## circles (points fitted according to final PLS model) and triangles (points fitted according to
## Leave-One-Out models).
## Note down the R2, RMSE and RPD values for the comparison table.
## QUESTION 12: Now prepare the PLS model with 3 components (set variable LV = 3)
## and prepare 1:1 plot for observed vs predicted variable. Which differences do you
## observe compared to the model with 4 components?
## ## Note down the R2, RMSE and RPD values for the comparison table.
## VARIABLES IMPORTANT FOR PROJECTION (VIP)
## In order to get insight in the important spectral variables for the PLS model,
## so-called VIPs can be calculated (check article Viscarra Rossel, 2008).
## The VIP values give a summary of the importance of a spectral variable for
## the modeling of both X (spectra) and Y (nitrogen).
##
## By executing the code below the VIPs for the 4 component PLS model will be calculated
## and presented in a figure.
## QUESTION 13: Which spectral variables seem to be the most important? Compare your result
## with table 1 of Curran (1989): is there any overlap in the location of the VIPs and the
## spectral regions associated to nitrogen in vegetation (table 1)?
## Do selected VIPs coincide with wavelength bands used for the vegetation indices?
### SELECT FROM HERE
### Getting the Variables Important for Projection (VIP) values out
### VIP.R: Implementation of VIP (variable importance in projection)(*) for the
### `pls' package.
### $Id: VIP.R,v 1.2 2007/07/30 09:17:36 bhm Exp $
## read the data set and check the data file: what do the columns represent?
data <- read.table("potato_N.csv", header=TRUE, sep=",")
## read the data set and check the data file: what do the columns represent?
data <- read.table("temp_potato_N.csv", header=TRUE, sep=",")
setwd("C:/Users/Aina/AppData/Local/Temp/Temp1_AEOmultivar.zip")
## read the data set and check the data file: what do the columns represent?
data <- read.table("potato_N.csv", header=TRUE, sep=",")
setwd("~/")
## read the data set and check the data file: what do the columns represent?
data <- read.table("potato_N.csv", header=TRUE, sep=",")
data <- as.data.frame(data)
head(data[1:10])
## make a variable with all the wavelengths: we need this one later
wavelength <- as.data.frame(t(c(350:2500)))
### evaluating the nitrogen data
N <- as.numeric(unlist(data[3]))
hist(N)
## make a matrix with spectral data only
spectra <-(data[4:ncol(data)])
## plotting the first 7 spectra
plot( t(spectra[1,])~t(wavelength), type="l", lty=1, ylim=c(0,1), xlab="band number [-]", ylab="Reflectance [-]")
points( t(spectra[2,])~t(wavelength), type="l", lty=2,col=2, ylim=c(0,1))
points( t(spectra[3,])~t(wavelength), type="l", lty=2,col=3, ylim=c(0,1))
points( t(spectra[4,])~t(wavelength), type="l", lty=2,col=4, ylim=c(0,1))
points( t(spectra[5,])~t(wavelength), type="l", lty=2,col=5, ylim=c(0,1))
points( t(spectra[6,])~t(wavelength), type="l", lty=2,col=6, ylim=c(0,1))
points( t(spectra[7,])~t(wavelength), type="l", lty=2,col=7, ylim=c(0,1))
## PLS is applied (function plsr) on all spectra, leave-one-out cross validation is applied to evaluate
## the quality of the PLS regression models
library(pls)
refl.pls <- plsr(N ~ as.matrix(spectra), ncomp=20, validation = "LOO") ## 5 components, LOO cross validation
## the next plot shows relation between nr of components of the PLS model
## and the accuracy of the PLS model indicated by the RMSEP
validationplot(refl.pls)
install.packages("pls")
## PLS is applied (function plsr) on all spectra, leave-one-out cross validation is applied to evaluate
## the quality of the PLS regression models
library(pls)
refl.pls <- plsr(N ~ as.matrix(spectra), ncomp=20, validation = "LOO") ## 5 components, LOO cross validation
## the next plot shows relation between nr of components of the PLS model
## and the accuracy of the PLS model indicated by the RMSEP
validationplot(refl.pls)
## Calculate the explained variance per component both for spectra (X) and nitrogen (N)
summary(refl.pls)
## calculate R2
R2.1 <- R2(refl.pls, ncomp=1)
R2.1 <- unlist(R2.1)
R2.1 <- round(R2.1$val2, digits=3)
R2.1
## calculate the RPD
pred.1 <-as.data.frame(fitted(refl.pls))
pred.1 <- as.numeric(as.matrix(pred.1[1]))
RMSE_pls.1 <- sqrt(mean((N - pred.1)^2))
RMSE_pls.1 <- round(RMSE_pls.1, digits=3)
RPD.1 <- round((sd(N)/RMSE_pls.1), digits=3)
RPD.1
## Prepare the 1:1 plot for observed vs predicted variable
plot (pred.1 ~N, xlab="Nitrogen observed [%]", ylab="Nitrogen predicted [%]", xlim=c(0,max(N)*1.2), ylim=c(0,max(N)*1.2), main="Nitrogen observed vs predicted")
abline(0,1, lty=2)
legend ("bottomright", c(paste("R2 = ", R2.1), paste("RMSE = ", RMSE_pls.1), paste("RPD = ", RPD.1)), bty="n")
legend (max(N),max(N)*1.15, "1:1 line", bty="n")
data <- read.table("potato_N.csv", header=TRUE, sep=",")
data <- as.data.frame(data)
head(data[1:10])
## make a variable with all the wavelengths: we need this one later
wavelength <- as.data.frame(t(c(350:2500)))
### evaluating the nitrogen data
N <- as.numeric(unlist(data[3]))
hist(N)
## QUESTION 1: are the nitrogen data normally distributed?
## make a matrix with spectral data only
spectra <-(data[4:ncol(data)])
## plotting the first 7 spectra
plot( t(spectra[1,])~t(wavelength), type="l", lty=1, ylim=c(0,1), xlab="band number [-]", ylab="Reflectance [-]")
points( t(spectra[2,])~t(wavelength), type="l", lty=2,col=2, ylim=c(0,1))
points( t(spectra[3,])~t(wavelength), type="l", lty=2,col=3, ylim=c(0,1))
points( t(spectra[4,])~t(wavelength), type="l", lty=2,col=4, ylim=c(0,1))
points( t(spectra[5,])~t(wavelength), type="l", lty=2,col=5, ylim=c(0,1))
points( t(spectra[6,])~t(wavelength), type="l", lty=2,col=6, ylim=c(0,1))
points( t(spectra[7,])~t(wavelength), type="l", lty=2,col=7, ylim=c(0,1))
## QUESTION 2: Evaluate the spectral dataset of the potato canopy: explain the form of the curve,
## how do you assess the quality of the data?
## PLS is applied (function plsr) on all spectra, leave-one-out cross validation is applied to evaluate
## the quality of the PLS regression models
library(pls)
refl.pls <- plsr(N ~ as.matrix(spectra), ncomp=20, validation = "LOO") ## 5 components, LOO cross validation
## the next plot shows relation between nr of components of the PLS model
## and the accuracy of the PLS model indicated by the RMSEP
validationplot(refl.pls)
## QUESTION 3: How do you assess the quality of the PLS model? How many components would
## you use for the PLS model?
## Calculate the explained variance per component both for spectra (X) and nitrogen (N)
summary(refl.pls)
## The CV values give the RMSEP values as indicated in the validation plot
## QUESTION 4: What is the RMSEP using 1 component? Note down the variance explained
## for the spectra (X) and the nitrogen (N) with one component.
## calculate R2
R2.1 <- R2(refl.pls, ncomp=1)
R2.1 <- unlist(R2.1)
R2.1 <- round(R2.1$val2, digits=3)
R2.1
## calculate the RPD
pred.1 <-as.data.frame(fitted(refl.pls))
pred.1 <- as.numeric(as.matrix(pred.1[1]))
RMSE_pls.1 <- sqrt(mean((N - pred.1)^2))
RMSE_pls.1 <- round(RMSE_pls.1, digits=3)
RPD.1 <- round((sd(N)/RMSE_pls.1), digits=3)
RPD.1
## QUESTION 5: How do you judge the value of the R2 and RPD for this PLS model with one component?
## Prepare the 1:1 plot for observed vs predicted variable
plot (pred.1 ~N, xlab="Nitrogen observed [%]", ylab="Nitrogen predicted [%]", xlim=c(0,max(N)*1.2), ylim=c(0,max(N)*1.2), main="Nitrogen observed vs predicted")
abline(0,1, lty=2)
legend ("bottomright", c(paste("R2 = ", R2.1), paste("RMSE = ", RMSE_pls.1), paste("RPD = ", RPD.1)), bty="n")
legend (max(N),max(N)*1.15, "1:1 line", bty="n")
## QUESTION 6: How do you evaluate this figure: what can you state about the quality of the model?
## Plot the regression coefficient of the PLS model with one component
coefplot(refl.pls, ncom=1, labels=wavelength)
## QUESTION 7: What do you conclude from the plot of regression coefficients? Which wavelengths
## are most important: does this explain the result of the PLS model?
## To improve the PLS model, now we will remove some spectral regions from the dataset.
## First create a dataset which includes both spectral data and the wavelength numbers
wavelength <- c(350:2500)
spectra.com <- as.matrix(t( data.frame(wavelength, t(spectra), check.names=FALSE)))
## Take selected variables only (note: these are variable names selected, not wavelengths
## add 350 to get the wavelength values)
#### wavelength.sel <- as.data.frame((wavelength[51:1001] wavelength[1201:1451] wavelength[1651:2051]))
spectra.sel <- (cbind(spectra.com[,51:1001], spectra.com[,1201:1451], spectra.com[,1651:2051]))
# QUESTION 8: Which wavelength ranges have been excluded?
### Plot graphs of first spectra in dataset
plot( (spectra.sel[2,]~(spectra.sel[1,])), type="l", lty=1, ylim=c(0,1), xlab="Wavelength [nm]", ylab="Reflectance factor [-]")
points( (spectra.sel[3,]~(spectra.sel[1,])), type="l", lty=2,col=2)
points( (spectra.sel[4,]~(spectra.sel[1,])), type="l", lty=3,col=3)
points( (spectra.sel[5,]~(spectra.sel[1,])), type="l", lty=4,col=4)
points( (spectra.sel[6,]~(spectra.sel[1,])), type="l", lty=5,col=5)
points( (spectra.sel[7,]~(spectra.sel[1,])), type="l", lty=6,col=6)
points( (spectra.sel[8,]~(spectra.sel[1,])), type="l", lty=7,col=7)
## Perform PLSR for dataset with removed spectral regions
## First create variable with reflectance data only
spectra.sel2<- as.matrix(spectra.sel[2:nrow(spectra.sel),] )
pls.sel <- plsr(N ~ spectra.sel2, ncomp=20, validation = "LOO", method="oscorespls") ## 5 components, LOO cross validation
## refl.pls <- plsr(N ~ spectra, 5, validation = "CV")  ## 5 components, 10 random segments
summary(pls.sel)
validationplot(pls.sel)
## QUESTION 9: Use the cross-validation plot to decide on the number of components to include
## in the PLS model: fill this number behind LV in the next script line
LV=4 ## set the number of components you want to include here
## Prepare loading plot per added component
coefplot(pls.sel, ncom=1, ylim=c(-12, 3)) ## coefficients component 1
coefplot(pls.sel, ncom=2, add=TRUE, col=2) ## coefficients component 2
coefplot(pls.sel, ncom=3, add=TRUE, col=3) ## coefficients component 3
coefplot(pls.sel, ncom=4, add=TRUE, col=4) ## coefficients component 3
## QUESTION 10: Explain what can be derived from the loading plot: black line: comp 1; red line:
## comp 2; green line: comp 3; and blue line: comp 4.
### Prepare the 1:1 plot for observed vs predicted variable
pred <-as.data.frame(fitted(pls.sel))
pred <- as.numeric(as.matrix(pred[LV]))
pred
RMSE.pls <- sqrt(mean((N - pred)^2))
RMSE.pls <- round(RMSE.pls, digits=3)
### Get the RMSE of the cross-validation
RMSE.pls.CV <- RMSEP(pls.sel, ncomp=LV)
RMSE.pls.CV <- unlist(RMSE.pls.CV)
RMSE.pls.CV <- round(RMSE.pls.CV$val4, digits=3)
### Get the R2 value out
R2.pls <- R2(pls.sel, ncomp=LV)
R2.pls <- unlist(R2.pls)
R2.pls <- round(R2.pls$val2, digits=3)
R2.pls
### Get the Leave-One-Out validation predicted values
pred.loo <- pls.sel$validation$pred[,,LV]
pred.loo
#### RPD of prediction
RPD <- round((sd(N)/RMSE.pls), digits=3)
RPD
#### Create the 1:1 plot for observed vs predicted variable
plot (pred ~N, xlab="Nitrogen observed [%]", ylab="Nitrogen fitted [%]", xlim=c(0,max(N)*1.2), ylim=c(0,max(N)*1.2), main="Nitrogen observed vs predicted")
points (pred.loo ~N, xlab="Nitrogen observed [%]", ylab="Nitrogen fitted [%]", xlim=c(0,max(N)*1.2), ylim=c(0,max(N)*1.2), main="Nitrogen observed vs predicted", col=2, pch=2)
abline(0,1, lty=2)
legend("topleft", c("Fitted", "Loo CV"), pch=c(1,2), col=c(1,2))
legend ("bottomright", c(paste("RMSE fit = ", RMSE.pls), paste("RMSE loocv =", RMSE.pls.CV), paste("R2 fit = ", R2.pls), paste("RPD = ", RPD)), bty="n")
legend (max(N),max(N)*1.15, "1:1 line", bty="n")
## QUESTION 11: How do you judge the value of this new PLS model? Explain the difference between
## circles (points fitted according to final PLS model) and triangles (points fitted according to
## Leave-One-Out models).
## Note down the R2, RMSE and RPD values for the comparison table.
## QUESTION 12: Now prepare the PLS model with 3 components (set variable LV = 3)
## and prepare 1:1 plot for observed vs predicted variable. Which differences do you
## observe compared to the model with 4 components?
## ## Note down the R2, RMSE and RPD values for the comparison table.
## VARIABLES IMPORTANT FOR PROJECTION (VIP)
## In order to get insight in the important spectral variables for the PLS model,
## so-called VIPs can be calculated (check article Viscarra Rossel, 2008).
## The VIP values give a summary of the importance of a spectral variable for
## the modeling of both X (spectra) and Y (nitrogen).
##
## By executing the code below the VIPs for the 4 component PLS model will be calculated
## and presented in a figure.
## QUESTION 13: Which spectral variables seem to be the most important? Compare your result
## with table 1 of Curran (1989): is there any overlap in the location of the VIPs and the
## spectral regions associated to nitrogen in vegetation (table 1)?
## Do selected VIPs coincide with wavelength bands used for the vegetation indices?
### SELECT FROM HERE
### Getting the Variables Important for Projection (VIP) values out
### VIP.R: Implementation of VIP (variable importance in projection)(*) for the
### `pls' package.
### $Id: VIP.R,v 1.2 2007/07/30 09:17:36 bhm Exp $
### Copyright © 2006,2007 Bjørn-Helge Mevik
### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License version 2 as
### published by the Free Software Foundation.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
### A copy of the GPL text is available here:
### http://www.gnu.org/licenses/gpl-2.0.txt
### Contact info:
### Bjørn-Helge Mevik
### bhx6@mevik.net
### Rødtvetvien 20
### N-0955 Oslo
### Norway
### (*) As described in Chong, Il-Gyo & Jun, Chi-Hyuck, 2005, Performance of
### some variable selection methods when multicollinearity is present,
### Chemometrics and Intelligent Laboratory Systems 78, 103--112.
## VIP returns all VIP values for all variables and all number of components,
## as a ncomp x nvars matrix.
VIP <- function(object) {
if (object$method != "oscorespls")
stop("Only implemented for orthogonal scores algorithm.  Refit with 'method = \"oscorespls\"'")
if (nrow(object$Yloadings) > 1)
stop("Only implemented for single-response models")
SS <- c(object$Yloadings)^2 * colSums(object$scores^2)
Wnorm2 <- colSums(object$loading.weights^2)
SSW <- sweep(object$loading.weights^2, 2, SS / Wnorm2, "*")
sqrt(nrow(SSW) * apply(SSW, 1, cumsum) / cumsum(SS))
}
## VIPjh returns the VIP of variable j with h components
VIPjh <- function(object, j, h) {
if (object$method != "oscorespls")
stop("Only implemented for orthogonal scores algorithm.  Refit with 'method = \"oscorespls\"'")
if (nrow(object$Yloadings) > 1)
stop("Only implemented for single-response models")
b <- c(object$Yloadings)[1:h]
T <- object$scores[,1:h, drop = FALSE]
SS <- b^2 * colSums(T^2)
W <- object$loading.weights[,1:h, drop = FALSE]
Wnorm2 <- colSums(W^2)
sqrt(nrow(W) * sum(SS * W[j,]^2 / Wnorm2) / sum(SS))
}
###
VIPS <- as.data.frame(VIP(pls.sel))
VIP<-VIPS[LV,]
plot(unlist(VIPS[LV,])~spectra.sel[1,], type="l", xlab="Wavelength [nm]", ylab="Importance")
plot(unlist(VIPS[LV,])~spectra.sel[1,], type="l", xlim=c(400,1000), xlab="Wavelength [nm]", ylab="Importance")
### combined VIP plots for varying number of latent Variables
plot(unlist(VIPS[1,])~spectra.sel[1,], type="l", xlab="Wavelength [nm]", ylab="Importance")
points(unlist(VIPS[2,])~spectra.sel[1,], type="l", lty=2, col=2)
points(unlist(VIPS[3,])~spectra.sel[1,], type="l", lty=3, col=3 )
points(unlist(VIPS[4,])~spectra.sel[1,], type="l", lty=4, col=4)
legend("topright", c("LV1", "LV2","LV3", "LV4"), lty=c(1,2,3,4), col=c(1,2,3,4))
### TILL HERE, AND EXECUTE
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
