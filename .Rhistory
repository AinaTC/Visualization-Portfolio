NDVIL8<- resample(NDVIL8, NDVIL5)
#Equal extension of the 2 images
NDVIL8<- resample(wag1Bands, wag2Bands)
compareRaster(NDVIL8, NDVIL5)
NDVIL8
NDVIL8()
NDVIL8
?NDVIL8
compareRaster(wag1Bands, wag2Bands)
wag1Band
wag1Bands
wag1Bands[1]
wag1Bands[[1]]
Wag1Raster
compareRaster(Wag1Raster, Wag2Raster)
compareRaster(wag1nmc, wag2nmc)
compareRaster(Wag1nmc, wag2nmc)
compareRaster(wagen1nmc, wagen2nmc)
Wagennmcr
Wagennmc
Wagen1nmc
wagen1nmc
ndviWag1
NDVIL8
#Equal extension of the 2 images
NDVIwag1<- resample(ndviWag1, ndviWag2)
#Eliminate Clouds and water from NDVI Rasters and plot them
NDVIL8<-ExtractCloudsAndWater(NDVIWag1, Clouds1)
#Eliminate Clouds and water from NDVI Rasters and plot them
NDVIL8<-ExtractCloudsAndWater(NDVIwag1, Clouds1)
plot(NDVIL8)
#Calculate the difference between the 2 NDVIs
NDVICompare(NDVIL8, NDVIL5)
#Calculate the difference between the 2 NDVIs
NDVIComparison<-NDVICompare(NDVIL8, NDVIL5)
plot(NDVIComparison)
plot(NDVIL5)
plot(NDVIComparison)
plot(NDVIL8)
plot(NDVIL5)
plot(NDVIComparison)
wag2files
plot(Clouds1)
#Create Raster for Clouds and Raster with only Bands
createRaster <- function (Filespattern){
bands<-list.files(Filespattern)
wagen <- stack(x=bands)
return(wagen)
}
#Create a raster for each image
Wag1Raster<-CreateRaster('LC8.*.tif')
#Create a raster for each image
Wag1Raster<-createRaster('LC8.*.tif')
#Create a raster for each image
Wag1Raster<-createRaster('LC8.*.tif')
#Create Raster for Clouds and Raster with only Bands
createRaster <- function (Filespattern){
bands<-list.files(pattern=Filespattern)
wagen <- stack(x=bands)
return(wagen)
}
#Create a raster for each image
Wag1Raster<-createRaster('LC8.*.tif')
Wag2Raster<-CreateRaster("LT5.*.tif")
Wag2Raster<-createRaster("LT5.*.tif")
#Create Raster from Bands
wagen1nmc<-createRaster("LT8.*band..tif")
wagen2nmc<-createRaster ("LT5.*band..tif")
#Create Raster from Bands
wagen1nmc<-createRaster("LT8.*band..tif")
# And for Landsat 5
ndviWag2<-NDVI_L5Calc(wag2nmc[[3]], wag2nmc[[4]])
# And for Landsat 5
ndviWag2<-NDVI_L5Calc(wagen2nmc[[3]], wagen2nmc[[4]])
plot(ndviWag2)
#Create Cloud Raster
Clouds1<-GetCloudLayer(Wag1Raster)
Clouds2<-GetCloudLayer(Wag2Raster)
#Create Raster from Bands
wagen1nmc<-createRaster("LT8.*band..tif")
#Create Raster from Bands
wagen1nmc<-createRaster("LC8.*band..tif")
#Calculate ndvi for image for Landsat 8 and plot it
ndviWag1<-NDVI_L8Calc(wagen1nmc[[5]], wagen1nmc[[4]])
plot(ndviWag1)
#Create Cloud Raster
Clouds1<-GetCloudLayer(Wag1Raster)
Clouds2<-GetCloudLayer(Wag2Raster)
#Equal extension of the 2 images
NDVIwag1<- resample(ndviWag1, ndviWag2)
#Eliminate Clouds and water from NDVI Rasters and plot them
NDVIL8<-ExtractCloudsAndWater(NDVIwag1, Clouds1)
NDVIL5<-ExtractCloudsAndWater(ndviWag2, Clouds2)
plot(NDVIL8)
plot(NDVIL5)
#Calculate the difference between the 2 NDVIs
NDVIComparison<-NDVICompare(NDVIL8, NDVIL5)
plot(NDVIComparison)
rm(list = ls())
#Provide source of the functions used
source('./Data/exercise5_alpha.r')
getwd()
getwd()
#Provide source of the functions used
source('/Data/exercise5_alpha.r')
#Provide source of the functions used
source('Data/exercise5_alpha.r')
getwd()
#Provide source of the functions used
setwd("~")
getwd()
source('Data/exercise5_alpha.r')
setwd("~")
getwd()
#get necessary libraries
library(raster)
library(rgdal)
#create folders if necessary, and set the directory to save the data in a proper location
if (dir.exists("exercise5") == FALSE) {dir.create("exercise5")}
setwd("./exercise5")
if (dir.exists("Data") == FALSE) {dir.create("Data")}
setwd("./Data")
#Download and unzip and untar
DownloadLink<- "https://www.dropbox.com/sh/3lz5vylc7tzpiup/AAB3HCFHdJFa8lV_PMRlV5Wda?dl=1"
download_and_unzipfiles(DownloadLink = DownloadLink , 'images')
#get files from Landsat 8 images
wag1files<-list.files(pattern= 'LC8.*.tif')
#Get only files from Landsat 8 bands
wag1Bands <- list.files(pattern = 'LC8.*band..tif')
#get files from Landsat 5 images
wag2files<-list.files(pattern="LT5.*.tif")
#Get only bands from L5 Bands
wag2Bands <- list.files(pattern ='LT5.*band..tif')
wag2files
#get files from Landsat 8 images
wag1files<-list.files(pattern= 'LC8.*.tif')
#Get only files from Landsat 8 bands
wag1Bands <- list.files(pattern = 'LC8.*band..tif')
#get files from Landsat 5 images
wag2files<-list.files(pattern="LT5.*.tif")
#Get only bands from L5 Bands
wag2Bands <- list.files(pattern ='LT5.*band..tif')
#Create a raster for each image
Wag1Raster<-createRaster('LC8.*.tif')
Wag2Raster<-createRaster("LT5.*.tif")
#Create Raster from Bands
wagen1nmc<-createRaster("LC8.*band..tif")
wagen2nmc<-createRaster ("LT5.*band..tif")
#Calculate ndvi for image for Landsat 8 and plot it
ndviWag1<-NDVI_L8Calc(wagen1nmc[[5]], wagen1nmc[[4]])
plot(ndviWag1)
# And for Landsat 5
ndviWag2<-NDVI_L5Calc(wagen2nmc[[3]], wagen2nmc[[4]])
plot(ndviWag2)
#Create Cloud Raster
Clouds1<-GetCloudLayer(Wag1Raster)
Clouds2<-GetCloudLayer(Wag2Raster)
#Equal extension of the 2 images
NDVIwag1<- resample(ndviWag1, ndviWag2)
#Eliminate Clouds and water from NDVI Rasters and plot them
NDVIL8<-ExtractCloudsAndWater(NDVIwag1, Clouds1)
NDVIL5<-ExtractCloudsAndWater(ndviWag2, Clouds2)
plot(NDVIL8)
plot(NDVIL5)
#Calculate the difference between the 2 NDVIs
NDVIComparison<-NDVICompare(NDVIL8, NDVIL5)
plot(NDVIComparison)
NDVIwag2 <- resample(ndviWag2, NDVIWag1)
NDVIwag2 <- resample(ndviWag2, NDVIwag1)
#Eliminate Clouds and water from NDVI Rasters and plot them
NDVIL8<-ExtractCloudsAndWater(NDVIwag1, Clouds1)
NDVIL5<-ExtractCloudsAndWater(ndviWag2, Clouds2)
plot(NDVIL8)
plot(NDVIL5)
#Calculate the difference between the 2 NDVIs
NDVIComparison<-NDVICompare(NDVIL8, NDVIL5)
plot(NDVIComparison)
plot(NDVIL8)
plot(NDVIL5)
plot(ndviWag1)
# Team Alpha
# 12 january 2018
# Exercise 5
#Clear Global environment
rm(list = ls())
#Provide source of the functions used
setwd("~")
getwd()
source('Data/exercise5_alpha.r')
my_route_points_xy<- st_zm(my_route_points)
library('sf')
my_route_points_xy<- st_zm(my_route_points)
point_wag<- st_point(c(5.654839, 51.963123))
point_bcn <- st_point(c( 2.186705, 41.428778))
my_points_sfc <- st_sfc(point_wag, point_bcn, crs=4326)
my_points_sfc_wgs <- st_sfc(point_wag, point_bcn, crs= '+proj=longlat +datum=WGS84 +no_defs')
identical(my_points_sfc, my_points_sfc_wgs)
class(my_points_sfc)
my_data <- data.frame(cbind(
id=c(1,2),
name = c('Point in Wageningen', ' Point in Barcelona')
))
my_points_sf <- st_set_geometry(my_data, my_points_sfc)
class(my_points_sf) == 'data.frame'
windows()
points_matrix<- rbind(point_wag, point_bcn)
myline_sfg <- st_linestring(points_matrix)
myline_sfc <- st_sfc(myline_sfg, crs= 4326)
class(points_matrix)
class(myline_sfc)
class(myline_sfg)
myline_df<- data.frame(id=1, name='line Wag-Bcn')
myline_sf <- st_set_geometry(myline_df, myline_sfc)
mix<-st_geometrycollection(c(point_bcn,point_wag, myline_sfg))
plot(mix)
dir.create('data')
st_write(obj=my_points_sf, dsn='./data/mypoints2.kml')
st_write(obj=myline_sf, dsn='./data/myline2.kml')
myroute<- st_read(dsn = './data/myroute.kml')
plot(myroute)
myroute=myroute[,'Name']
try(st_write(myroute, dsn='./data/route.geojson'))
try(st_write(myroute, dsn='./data/route.gml'))
try(st_write(my_route_line, dsn='./data/route_line.shp'))
my_route_line <- myroute[st_is(myroute, type='LINESRING'),]
my_route_points <- myroute[st_is(myroute, type='POINT'),]
try(st_write(my_route_points, dsn='./data/route_points.shp'))
my_route_points_xy<- st_zm(my_route_points)
myroute_line_xy <- st_zm(my_route_line)
my_route_points_xy
try(st_write(my_route_points_xy, dsn='./data/route_points.shp'))
try(st_write(my_route_linexy, dsn='./data/route_line.shp'))
try(st_write(myroute_line_xy, dsn='./data/route_line.shp'))
try(st_write(myroute_line_xy, dsn='./data/route.shp'))
proj_string_RD <- st_crs('+proj=sterea +lat_0=52.15616055555555 +lon_0=5.3876388888889 +k=0.9999079 +x_0=155000 +y_0=463000 +elips=besse1 +towgs84=565.2369,50.0087,465.658,-0.40685730322398,0.350732676542563,-1.8703473836068,4.0812 +units=m +no_defs')
prj_string_RD <- st_crs("+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.8703473836068,4.0812 +units=m +no_defs")
myroute_rd_string <- st_transform(myroute_line_xy, crs= prj_string_RD)
point_wag<- st_point(c(5.654839, 51.963123))
point_bcn <- st_point(c( 5.186705, 51.428778))
my_points_sfc <- st_sfc(point_wag, point_bcn, crs=4326)
my_points_sfc_wgs <- st_sfc(point_wag, point_bcn, crs= '+proj=longlat +datum=WGS84 +no_defs')
identical(my_points_sfc, my_points_sfc_wgs)
class(my_points_sfc)
my_data <- data.frame(cbind(
id=c(1,2),
name = c('Point in Wageningen', ' Point in Barcelona')
))
my_points_sf <- st_set_geometry(my_data, my_points_sfc)
class(my_points_sf) == 'data.frame'
points_matrix<- rbind(point_wag, point_bcn)
myline_sfg <- st_linestring(points_matrix)
myline_sfc <- st_sfc(myline_sfg, crs= 4326)
myline_df<- data.frame(id=1, name='line Wag-Bcn')
myline_sf <- st_set_geometry(myline_df, myline_sfc)
mix<-st_geometrycollection(c(point_bcn,point_wag, myline_sfg))
dir.create('data')
myroute=myroute[,'Name']
my_route_line <- myroute[st_is(myroute, type='LINESRING'),]
my_route_points <- myroute[st_is(myroute, type='POINT'),]
my_route_points_xy<- st_zm(my_route_points)
myroute_line_xy <- st_zm(my_route_line)
my_route_points_xy
prj_string_RD <- st_crs("+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.8703473836068,4.0812 +units=m +no_defs")
myroute_rd_string <- st_transform(myroute_line_xy, crs= prj_string_RD)
st_write(obj=my_points_sf, dsn='./data/mypointsW.kml')
st_write(obj=myline_sf, dsn='./data/mylineW.kml')
myroute<- st_read(dsn = './data/MyRouteW.kml')
plot(myroute)
myroute=myroute[,'Name']
try(st_write(myroute, dsn='./data/route.geojson'))
try(st_write(myroute, dsn='./data/routeW.geojson'))
try(st_write(myroute, dsn='./data/routeW.gml'))
try(st_write(myroute_line_xy, dsn='./data/routeW.shp'))
my_route_line <- myroute[st_is(myroute, type='LINESRING'),]
my_route_points <- myroute[st_is(myroute, type='POINT'),]
try(st_write(my_route_points_xy, dsn='./data/route_pointsW.shp'))
my_route_points_xy<- st_zm(my_route_points)
myroute_line_xy <- st_zm(my_route_line)
my_route_points_xy
try(st_write(myroute_line_xy, dsn='./data/routeW.shp'))
try(st_write(myroute_line_xy, dsn='./data/routeWW.shp'))
try(st_write(my_route_points_xy, dsn='./data/route_pointsWW.shp'))
prj_string_RD <- st_crs("+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.2369,50.0087,465.658,-0.406857330322398,0.350732676542563,-1.8703473836068,4.0812 +units=m +no_defs")
myroute_rd_string <- st_transform(myroute_line_xy, crs= prj_string_RD)
my_route_rd_num <- st_transform(myroute_line_xy, crs=28992)
my_route_points_rd <- st_transform(my_route_points_xy, crs=28992)
plot(myroute_rd_string)
plot(myroute_line_xy)
box()
plot(myroute_line_xy)
point_wag<- st_point(c(5.654839, 51.963123))
point_bcn <- st_point(c( 5.186705, 51.428778))
my_points_sfc <- st_sfc(point_wag, point_bcn, crs=4326)
my_points_sfc_wgs <- st_sfc(point_wag, point_bcn, crs= '+proj=longlat +datum=WGS84 +no_defs')
identical(my_points_sfc, my_points_sfc_wgs)
class(my_points_sfc)
my_data <- data.frame(cbind(
id=c(1,2),
name = c('Point in Wageningen', ' Point in Barcelona')
))
my_points_sf <- st_set_geometry(my_data, my_points_sfc)
class(my_points_sf) == 'data.frame'
plot(my_points_sf[,'name'], pch=3)
points_matrix<- rbind(point_wag, point_bcn)
myline_sfg <- st_linestring(points_matrix)
myline_sfc <- st_sfc(myline_sfg, crs= 4326)
class(points_matrix)
class(myline_sfc)
class(myline_sfg)
myline_df<- data.frame(id=1, name='line Wag-Bcn')
myline_sf <- st_set_geometry(myline_df, myline_sfc)
plot(myline_sf[1], main= myline_sf$name, col='red', lwd=3, lty=5, graticule=TRUE, xlab = 'latitude', ylab='longitude', axes=TRUE)
plot(my_points_sf[,'name'], pch= 3, axes=TRUE, add=TRUE)
windows()
plot(myline_sf[1], main= myline_sf$name, col='red', lwd=3, lty=5, graticule=TRUE, xlab = 'latitude', ylab='longitude', axes=TRUE)
plot(my_points_sf[,'name'], pch= 3, axes=TRUE, add=TRUE)
mix<-st_geometrycollection(c(point_bcn,point_wag, myline_sfg))
plot(mix)
dir.create('data')
plot(myroute)
my_route_line <- myroute[st_is(myroute, type='LINESRING'),]
my_route_points <- myroute[st_is(myroute, type='POINT'),]
my_route_points_xy<- st_zm(my_route_points)
myroute_line_xy <- st_zm(my_route_line)
my_route_points_xy
plot(my_route_points_xy)
plot(myroute_line_xy)
myroute_line_xy
myroute_line
my_route_line
myroute=myroute[,'Name']
my_route
myroute
my_route_line <- myroute[st_is(myroute, type='LINESRING'),]
myroute_line_xy <- st_zm(my_route_line)
plot(myroute_line_xy)
myroute<- st_read(dsn = './data/MyRouteW.kml')
myroute=myroute[,'Name']
myroute
plot(myroute)
my_route_line <- myroute[st_is(myroute, type='LINESRING'),]
my_route_line
my_route_line <- myroute[st_is(myroute, type='LINESTRING'),]
my_route_line
my_route_points_xy<- st_zm(my_route_points)
myroute_line_xy <- st_zm(my_route_line)
plot(myroute_line_xy)
myroute_rd_string <- st_transform(myroute_line_xy, crs= prj_string_RD)
my_route_rd_num <- st_transform(myroute_line_xy, crs=28992)
plot(myroute_line_xy)
box()
my_route_rd_num
myroute_rd_string
try(install.packages('geosphere'))
library(geosphere)
(dist_netw_wgs=st_length(myroute_line_xy))
(dist_netw_wgs = st_length(myroute_line_xy))
install.packages('lwgeom')
library(lwgeom)
(dist_netw_wgs=st_length(myroute_line_xy))
(dist_netw_wgs = st_length(myroute_line_xy))
(dist_netw_rd = st_length(myroute_rd_num))
(dist_netw_rd = st_length(my_route_rd_num))
(dist_eucl_wgs = st_distance(myroute_points_xy)[1,2])
(dist_eucl_wgs = st_distance(my_route_points_xy)[1,2])
(dist_eucl_rd = st_distance(myroute_points_rd)[1,2])
(dist_eucl_rd = st_distance(my_route_points_rd)[1,2])
units::set_units(dist_netw_rd, km)
point1_sfg_rd <- st_point(c(174023.833719082, 445086.995949553))
point2_sfg_rd <- st_point(c(174655.068279838, 443855.475880421))
mypoints_sfc_rd <- st_sfc(point1_sfg_rd, point2_sfg_rd, crs = 28992)
pnt1_rd <- mypoints_sfc_rd[[1]]
pnt2_rd <- mypoints_sfc_rd[[2]]
dist_points_rd <- st_distance(mypoints_sfc_rd)[1,2]
ang <- pi*0:200/100
ang
circle1x <- pnt1_rd[1]+ cos(ang) * as.double(dist_points_rd)
circle1y <- pnt1_rd[2] + sin(ang) * as.double(dist_points_rd)
circle2x <- pnt2_rd[1]+ cos(ang) * as.double(dist_points_rd)
circle2y <- pnt2_rd[2] + sin(ang) * as.double(dist_points_rd)
c1 <- cbind(circle1x, circle1y)
c2 <- cbind(circle2x, circle2y)
c2
plot(c1, pch = 19, cex = 0.2, col = "red", ylim = range(circle1y, circle2y), xlim = range(circle1x, circle2x))
points(c2, pch = 19, cex = 0.2, col = "blue")
plot(mypoints_sfc_rd, pch = 3, col= "darkgreen", add = TRUE)
windows()
plot(c1, pch = 19, cex = 0.2, col = "red", ylim = range(circle1y, circle2y), xlim = range(circle1x, circle2x))
points(c2, pch = 19, cex = 0.2, col = "blue")
plot(mypoints_sfc_rd, pch = 3, col= "darkgreen", add = TRUE)
plot(circle1x)
plot(circle1y)
plot(c1)
circle1_sfg <- st_polygon(list(cbind(circle1x, circle1y)))
circle2_sfg <- st_polygon(list(cbind(circle2x, circle2y)))
circles_sfc <- st_sfc(circle1_sfg, circle2_sfg, crs = 28992)
circles_df <- data.frame(name = c("circle1", "circle2"), row.names=c("1", "2"))
circles_sf <- st_set_geometry(circles_df, circles_sfc)
plot(circles_sf)
point_buff <- st_buffer(mypoints_sfc_rd, dist = dist_points_rd)
plot(point_buff, col = c("#2b8cbe", "#31a354"), lwd = 2)
plot(mypoints_sfc_rd, add = TRUE, col="red", pch=19, cex=1.5)
circle_quadsegs <- st_buffer(mypoints_sfc_rd[1],  dist=dist_points_rd, nQuadSegs=2)
circles_diff <- st_difference(circles_sfc[1], circle_quadsegs)
plot(circles_sfc[1], col = "red")
plot(circle_quadsegs, add = TRUE, lty = 3, lwd = 2, col = "grey")
circle_quadsegs <- st_buffer(mypoints_sfc_rd[1],  dist=dist_points_rd, nQuadSegs=3)
circles_diff <- st_difference(circles_sfc[1], circle_quadsegs)
plot(circles_sfc[1], col = "red")
plot(circle_quadsegs, add = TRUE, lty = 3, lwd = 2, col = "grey")
circle_quadsegs <- st_buffer(mypoints_sfc_rd[1],  dist=dist_points_rd, nQuadSegs=4)
circles_diff <- st_difference(circles_sfc[1], circle_quadsegs)
plot(circles_sfc[1], col = "red")
plot(circle_quadsegs, add = TRUE, lty = 3, lwd = 2, col = "grey")
circle_quadsegs <- st_buffer(mypoints_sfc_rd[1],  dist=dist_points_rd, nQuadSegs=14)
circles_diff <- st_difference(circles_sfc[1], circle_quadsegs)
plot(circles_sfc[1], col = "red")
plot(circle_quadsegs, add = TRUE, lty = 3, lwd = 2, col = "grey")
circle_quadsegs <- st_buffer(mypoints_sfc_rd[1],  dist=dist_points_rd, nQuadSegs=19)
circles_diff <- st_difference(circles_sfc[1], circle_quadsegs)
plot(circles_sfc[1], col = "red")
plot(circle_quadsegs, add = TRUE, lty = 3, lwd = 2, col = "grey")
st_area(circles_diff)
units::set_units(st_area(circles_diff), hectare)
circles_intersect <- st_intersection(circles_sfc[1], circles_sfc[2])
plot(circles_sfc, col='grey')
plot(circles_intersect, col = 'red', add=TRUE)
(paste(round(100 * st_area(circles_intersect) / st_area(circles_sfc[1]),2), "%"))
plot( st_difference())
plot( circles_diff)
circle_dif
circle_diff
circles_diff
circles_intersect
plot(circles_intersect)
plot(circles_sfc[1], col = "red")
?st_difference
library(raster)
library(foreign)
rm(list = ls())
download.file('https://www.eea.europa.eu/data-and-maps/data/corine-land-cover-clc1990-100-m-version-9-2007/', destfile = './data/corine.dbf')
library('shiny')
shiny::runGist("2556d79d899f253c46ee830a3b1c5c15")
if(!require(shiny)) {
install.packages("shiny")
}
library(shiny)
library(leaflet)
library(rgdal)
ui <- fluidPage(
titlePanel("Temperature interpolation"),
sidebarLayout(
sidebarPanel(
textInput("countryInput", label=h3("Country code"), value="NL"),
radioButtons('method', h3('Select method'), choices = c("Inverse distance weighted" = 'idw', "kriging"= 'kriging') ,selected= 'idw'),
actionButton("action", label = "Search!")
),
mainPanel(
textOutput("text"),
leafletOutput('plot')
)
)
)
source('timelapseShiny.r', local = T)
library(colorRamps)
server <- function(input, output){
autoInvalidate <- reactiveTimer(60000*5) #Auto invalidate every 5 min
observeEvent(input$action, {
output$text <- renderText({
paste('Computing',input$method)
})
output$plot <- renderLeaflet({
autoInvalidate()
method<- switch(input$method, 'idw'= 'idw', 'kriging'= 'kriging', 'idw best idp'= 'idw')
cc<-timelapse(input$countryInput, method=input$method, bestIDP = F, pd=100)
map <- leaflet()
map <- addTiles(map)
map <- addRasterImage(map,cc[[1]], opacity=0.5,colorNumeric(palette=matlab.like(50),domain=cc[[3]], na.color=NA))
map <- addLegend(map, position=c("bottomright"), pal=colorNumeric(palette=matlab.like(50),domain=cc[[3]], na.color=NA, reverse=F), values=cc[[3]])
map <- addScaleBar(map)
map
})})
# })
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/Aina/Downloads")
runApp('shinny_tempWorking (1).r')
setwd("C:/Users/Aina/Downloads")
library(shiny); runApp('shinny_tempWorking.r')
runApp('shinny_tempWorking.r')
runApp('shinny_tempWorking.r')
runApp('shinny_tempWorking.r')
runApp('shinny_tempWorking.r')
runApp('shinny_tempWorking.r')
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
setwd ("C:/Users/Aina/personal_site/VisualizationPortfolio")
rmarkdown::render_site()
